/*
 * Api documentation
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package getfood.io.data.network.api;

import getfood.io.data.network.ApiCallback;
import getfood.io.data.network.ApiClient;
import getfood.io.data.network.ApiException;
import getfood.io.data.network.ApiResponse;
import getfood.io.data.network.Configuration;
import getfood.io.data.network.Pair;
import getfood.io.data.network.ProgressRequestBody;
import getfood.io.data.network.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import getfood.io.models.ListItem;
import getfood.io.models.ListItemCreateUpdate;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ListItemControllerApi {
    private ApiClient apiClient;

    public ListItemControllerApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ListItemControllerApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for listItemControllerCreate
     * @param listId  (required)
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listItemControllerCreateCall(String listId, ListItemCreateUpdate body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/list/{listId}/items"
            .replaceAll("\\{" + "listId" + "\\}", apiClient.escapeString(listId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "token" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listItemControllerCreateValidateBeforeCall(String listId, ListItemCreateUpdate body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'listId' is set
        if (listId == null) {
            throw new ApiException("Missing the required parameter 'listId' when calling listItemControllerCreate(Async)");
        }
        
        com.squareup.okhttp.Call call = listItemControllerCreateCall(listId, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create Item in List
     * 
     * @param listId  (required)
     * @param body  (optional)
     * @return ListItem
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ListItem listItemControllerCreate(String listId, ListItemCreateUpdate body) throws ApiException {
        ApiResponse<ListItem> resp = listItemControllerCreateWithHttpInfo(listId, body);
        return resp.getData();
    }

    /**
     * Create Item in List
     * 
     * @param listId  (required)
     * @param body  (optional)
     * @return ApiResponse&lt;ListItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ListItem> listItemControllerCreateWithHttpInfo(String listId, ListItemCreateUpdate body) throws ApiException {
        com.squareup.okhttp.Call call = listItemControllerCreateValidateBeforeCall(listId, body, null, null);
        Type localVarReturnType = new TypeToken<ListItem>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create Item in List (asynchronously)
     * 
     * @param listId  (required)
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listItemControllerCreateAsync(String listId, ListItemCreateUpdate body, final ApiCallback<ListItem> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listItemControllerCreateValidateBeforeCall(listId, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ListItem>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listItemControllerDelete
     * @param listId  (required)
     * @param listItemId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listItemControllerDeleteCall(String listId, String listItemId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/v1/list/{listId}/items/{listItemId}"
            .replaceAll("\\{" + "listId" + "\\}", apiClient.escapeString(listId.toString()))
            .replaceAll("\\{" + "listItemId" + "\\}", apiClient.escapeString(listItemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "token" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listItemControllerDeleteValidateBeforeCall(String listId, String listItemId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'listId' is set
        if (listId == null) {
            throw new ApiException("Missing the required parameter 'listId' when calling listItemControllerDelete(Async)");
        }
        // verify the required parameter 'listItemId' is set
        if (listItemId == null) {
            throw new ApiException("Missing the required parameter 'listItemId' when calling listItemControllerDelete(Async)");
        }
        
        com.squareup.okhttp.Call call = listItemControllerDeleteCall(listId, listItemId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete Item in List
     * 
     * @param listId  (required)
     * @param listItemId  (required)
     * @return ListItem
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ListItem listItemControllerDelete(String listId, String listItemId) throws ApiException {
        ApiResponse<ListItem> resp = listItemControllerDeleteWithHttpInfo(listId, listItemId);
        return resp.getData();
    }

    /**
     * Delete Item in List
     * 
     * @param listId  (required)
     * @param listItemId  (required)
     * @return ApiResponse&lt;ListItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ListItem> listItemControllerDeleteWithHttpInfo(String listId, String listItemId) throws ApiException {
        com.squareup.okhttp.Call call = listItemControllerDeleteValidateBeforeCall(listId, listItemId, null, null);
        Type localVarReturnType = new TypeToken<ListItem>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete Item in List (asynchronously)
     * 
     * @param listId  (required)
     * @param listItemId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listItemControllerDeleteAsync(String listId, String listItemId, final ApiCallback<ListItem> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listItemControllerDeleteValidateBeforeCall(listId, listItemId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ListItem>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listItemControllerUpdate
     * @param listId  (required)
     * @param listItemId  (required)
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listItemControllerUpdateCall(String listId, String listItemId, ListItemCreateUpdate body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/v1/list/{listId}/items/{listItemId}"
            .replaceAll("\\{" + "listId" + "\\}", apiClient.escapeString(listId.toString()))
            .replaceAll("\\{" + "listItemId" + "\\}", apiClient.escapeString(listItemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "token" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listItemControllerUpdateValidateBeforeCall(String listId, String listItemId, ListItemCreateUpdate body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'listId' is set
        if (listId == null) {
            throw new ApiException("Missing the required parameter 'listId' when calling listItemControllerUpdate(Async)");
        }
        // verify the required parameter 'listItemId' is set
        if (listItemId == null) {
            throw new ApiException("Missing the required parameter 'listItemId' when calling listItemControllerUpdate(Async)");
        }
        
        com.squareup.okhttp.Call call = listItemControllerUpdateCall(listId, listItemId, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update Item in List
     * 
     * @param listId  (required)
     * @param listItemId  (required)
     * @param body  (optional)
     * @return ListItem
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ListItem listItemControllerUpdate(String listId, String listItemId, ListItemCreateUpdate body) throws ApiException {
        ApiResponse<ListItem> resp = listItemControllerUpdateWithHttpInfo(listId, listItemId, body);
        return resp.getData();
    }

    /**
     * Update Item in List
     * 
     * @param listId  (required)
     * @param listItemId  (required)
     * @param body  (optional)
     * @return ApiResponse&lt;ListItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ListItem> listItemControllerUpdateWithHttpInfo(String listId, String listItemId, ListItemCreateUpdate body) throws ApiException {
        com.squareup.okhttp.Call call = listItemControllerUpdateValidateBeforeCall(listId, listItemId, body, null, null);
        Type localVarReturnType = new TypeToken<ListItem>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update Item in List (asynchronously)
     * 
     * @param listId  (required)
     * @param listItemId  (required)
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listItemControllerUpdateAsync(String listId, String listItemId, ListItemCreateUpdate body, final ApiCallback<ListItem> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listItemControllerUpdateValidateBeforeCall(listId, listItemId, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ListItem>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
